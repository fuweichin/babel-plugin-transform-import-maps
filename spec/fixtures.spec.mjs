// This file is auto-generated by run-fixtures.mjs
import {readFile as readFileAsync} from 'fs/promises';
import babel from '@babel/core';
import transformImportMapsPlugin from '../src/index.mjs';

describe('TransformImportMaps', () => {
  it('bare-specifier', async () => {
    let {inputFile, importmapFile, expectedOutputFile, pluginOptions} = (await import('./fixtures/bare-specifier.js')).default;
    let output = await babel.transformFileAsync(inputFile, {
      plugins: [
        [transformImportMapsPlugin, {
          srcText: await readFileAsync(importmapFile, {encoding: 'utf-8'}),
          ...pluginOptions,
        }]
      ],
    });
    let expectedOutputCode = await readFileAsync(expectedOutputFile, {encoding: 'utf-8'});
    expect(output.code).toEqual(expectedOutputCode.replace(/\n\n+/g, () => '\n').trimEnd());
  });
  it('specifier-excluding', async () => {
    let {inputFile, importmapFile, expectedOutputFile, pluginOptions} = (await import('./fixtures/specifier-excluding.js')).default;
    let output = await babel.transformFileAsync(inputFile, {
      plugins: [
        [transformImportMapsPlugin, {
          srcText: await readFileAsync(importmapFile, {encoding: 'utf-8'}),
          ...pluginOptions,
        }]
      ],
    });
    let expectedOutputCode = await readFileAsync(expectedOutputFile, {encoding: 'utf-8'});
    expect(output.code).toEqual(expectedOutputCode.replace(/\n\n+/g, () => '\n').trimEnd());
  });
  it('specifier-syntax', async () => {
    let {inputFile, importmapFile, expectedOutputFile, pluginOptions} = (await import('./fixtures/specifier-syntax.js')).default;
    let output = await babel.transformFileAsync(inputFile, {
      plugins: [
        [transformImportMapsPlugin, {
          srcText: await readFileAsync(importmapFile, {encoding: 'utf-8'}),
          ...pluginOptions,
        }]
      ],
    });
    let expectedOutputCode = await readFileAsync(expectedOutputFile, {encoding: 'utf-8'});
    expect(output.code).toEqual(expectedOutputCode.replace(/\n\n+/g, () => '\n').trimEnd());
  });
  it('transforming-report', async () => {
    let {inputFile, importmapFile, expectedOutputFile, pluginOptions} = (await import('./fixtures/transforming-report.js')).default;
    let output = await babel.transformFileAsync(inputFile, {
      plugins: [
        [transformImportMapsPlugin, {
          srcText: await readFileAsync(importmapFile, {encoding: 'utf-8'}),
          ...pluginOptions,
        }]
      ],
    });
    let expectedOutputCode = await readFileAsync(expectedOutputFile, {encoding: 'utf-8'});
    expect(output.code).toEqual(expectedOutputCode.replace(/\n\n+/g, () => '\n').trimEnd());
  });
  it('url-specifier', async () => {
    let {inputFile, importmapFile, expectedOutputFile, pluginOptions} = (await import('./fixtures/url-specifier.js')).default;
    let output = await babel.transformFileAsync(inputFile, {
      plugins: [
        [transformImportMapsPlugin, {
          srcText: await readFileAsync(importmapFile, {encoding: 'utf-8'}),
          ...pluginOptions,
        }]
      ],
    });
    let expectedOutputCode = await readFileAsync(expectedOutputFile, {encoding: 'utf-8'});
    expect(output.code).toEqual(expectedOutputCode.replace(/\n\n+/g, () => '\n').trimEnd());
  });
});
